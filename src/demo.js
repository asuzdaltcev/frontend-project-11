// demo.js - —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
import { validateUrl } from './validation.js';
import i18n from './i18n.js';

const testCases = [
  {
    url: '',
    existing: [],
    expected: 'required',
    description: '–ü—É—Å—Ç–æ–π URL'
  },
  {
    url: 'not-a-url',
    existing: [],
    expected: 'invalidUrl',
    description: '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π URL'
  },
  {
    url: 'https://example.com/feed',
    existing: [],
    expected: null,
    description: '–í–∞–ª–∏–¥–Ω—ã–π URL'
  },
  {
    url: 'https://example.com/feed',
    existing: ['https://example.com/feed'],
    expected: 'duplicate',
    description: '–î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è URL'
  },
  {
    url: 'https://another-example.com/rss',
    existing: ['https://example.com/feed'],
    expected: null,
    description: '–ù–æ–≤—ã–π –≤–∞–ª–∏–¥–Ω—ã–π URL'
  }
];

export const runTests = () => {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏...\n');
  
  const promises = testCases.map((testCase, index) => {
    return validateUrl(testCase.url, testCase.existing)
      .then((result) => {
        const passed = result === testCase.expected;
        const status = passed ? '‚úÖ' : '‚ùå';
        const expectedText = testCase.expected ? i18n.t(`errors.${testCase.expected}`) : 'null';
        const resultText = result ? i18n.t(`errors.${result}`) : 'null';
        
        console.log(`${status} –¢–µ—Å—Ç ${index + 1}: ${testCase.description}`);
        console.log(`   URL: "${testCase.url}"`);
        console.log(`   –û–∂–∏–¥–∞–ª–æ—Å—å: ${expectedText} (–∫–æ–¥: ${testCase.expected || 'null'})`);
        console.log(`   –ü–æ–ª—É—á–µ–Ω–æ: ${resultText} (–∫–æ–¥: ${result || 'null'})`);
        console.log('');
        return passed;
      });
  });

  return Promise.all(promises)
    .then((results) => {
      const passed = results.filter(Boolean).length;
      const total = results.length;
      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: ${passed}/${total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏`);
      
      if (passed === total) {
        console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
      } else {
        console.log('‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏');
      }
    });
}; 